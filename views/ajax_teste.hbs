<div class="row" id="projetos">
    
    
  <div class="mensagemRank" id="mensagem ranking"> </div>
     
    <div class="colunas" id="GraficoDeColunas">     
      <h2>Informações do Usuário</h2>
      <h> Nota por parâmetro <br> <br> </h>
    </div>  

    <div class="participacao" id="GraficoDeParticipacao">
      <h2> Participação do Usuario na Empresa </h2>
    </div>
   
    <div class="linhas" id="GraficoDeLinhas">
      <h2>Horas Extras Realizadas</h2>
    </div>
  
    <style>

     .colunas {
      text-align: center;
      align-items: center;
      }
      
      .participacao{
        float:left;
        width:40%;
        text-align: center;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
      }
      
      .linhas{
        float:right;
        width:60%;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        
      }
      @media screen and (max-width: 768px) {
        /* Estilos para dispositivos com largura máxima de 768 pixels (dispositivos móveis) */

        #GraficoDeColunas {
          font-size: 3vw; 
        }

        /* Para a div GraficoDeParticipacao */
        #GraficoDeParticipacao {
          font-size: 1vw; 
        }

        #GraficoDeLinhas h2{
          font-size: 4vw;
        }
        #GraficoDeParticipacao h2{
          font-size: 5vw;
        }
      }


    </style>

    <script>

      var url = '/userapi/'; //url das informações do usuario
      
      var xmlhttp = new XMLHttpRequest();         
      xmlhttp.open('GET',url, true);              //config. da requisição XMLHTTP

      xmlhttp.onreadystatechange = function() {    //função que vai checar se ta tudo certo e se estiver coleta e processa os dados
        if (this.readyState == 4 && this.status == 200) {
          var DadosColetados = JSON.parse(this.responseText);
          processamento(DadosColetados);                 //chamada da função que vai processar os dados coletados (declarada mais a frente no código)
        }
      };
      xmlhttp.send();                                      //envio dos dados requisitados

      function processamento(dados){
        const DadosUsuario = JSON.parse(dados);
        console.log(DadosUsuario);
  
        var nomesItensRanking = []; //nome das chaves
        var valoresItensRanking = []; //notas

        // Adiciona as chaves individualmente ao array nomesItensRanking
        Object.keys(DadosUsuario.ranking).forEach(function(chave) {
        nomesItensRanking.push(chave);
        });

        // Adiciona os valores ao array valoresItensRanking
        valoresItensRanking = Object.values(DadosUsuario.ranking);  
        
        console.log(nomesItensRanking);
        console.log(valoresItensRanking);
    
        //grafico de colunas
        var colunas = {
            series: [{
            name: 'nota',
            data: valoresItensRanking.slice(0, 9)
          }],
            chart: {
            height: 350,
            type: 'bar',
          },
          plotOptions: {
            bar: {
              borderRadius: 10,
              dataLabels: {
                position: 'top', // top, center, bottom
              },
            }
          },
          dataLabels: {
            enabled: true,
            formatter: function (val) {
              return val;
            },
            offsetY: -20,
            style: {
              fontSize: '14px',
              colors: ["#304758"]
            }
          },
          
          xaxis: {
            categories: nomesItensRanking.slice(0, 9),
            position: 'top',
            axisBorder: {
              show: false
            },
            axisTicks: {
              show: false
            },
            crosshairs: {
              fill: {
                type: 'gradient',
                gradient: {
                  colorFrom: '#D8E3F0',
                  colorTo: '#BED1E6',
                  stops: [0, 100],
                  opacityFrom: 0.4,
                  opacityTo: 0.5,
                }
              }
            },
            tooltip: {
              enabled: true,
            }
          },
          yaxis: {
            max: 10,
            axisBorder: {
              show: false
            },
            axisTicks: {
              show: false,
            },
            labels: {
              show: false,
              formatter: function (val) {
                return val ;
              }
            }
          
          },
          };
          if (window.innerWidth <= 600) { // checagem se a largura da tela for menor ou igual a 600 pixels (dispositivo móvel)
            
            colunas.xaxis.categories = ['Prod', 'Quali', 'Equipe', 'Prazos', 'Inici.', 'Conflito', 'Treino', ' EPI', 'Feedback'];
          }

          var chart = new ApexCharts(document.querySelector("#GraficoDeColunas"), colunas);
          chart.render();

        var somaValores = valoresItensRanking.slice(0, 9).reduce(function (a, b) {
        return a + b;
        }, 0);                //criando o rank

        var mensagemRankingDiv = document.getElementById('mensagem ranking');
        
        //grafico de linhas
        var linhas = {
        series: [
          {
            name: "Horas Extras",
            data: Object.values(DadosUsuario.horas_extras)
          }
        ],
        chart: {
          height: 350,
          type: 'line',
          zoom: {
            enabled: false
          }
        },
        dataLabels: {
          enabled: false
        },
        stroke: {
          curve: 'smooth'
        },
        grid: {
          row: {
            colors: ['#f3f3f3', 'transparent'],
            opacity: 0.5
          },
        },
        xaxis: {
          categories: Object.keys(DadosUsuario.horas_extras)
        }
      };
            
      if (window.innerWidth <= 768) { // verificação se a largura da tela for menor ou igual a 600 pixels (dispositivo móvel)
        linhas.xaxis.categories = ['J', 'F', 'M', 'A','M','J','J','A','S','O','N','D']; 
      }

      var chartLinhas = new ApexCharts(document.querySelector("#GraficoDeLinhas"), linhas);
      chartLinhas.render();

      // Gráfico de pizza de Participação 
      var PizzaParticipacaoMercado = {
        series: Object.values(DadosUsuario.participacao_mercado_anual['2023']), // Valores das fatias para o mês de janeiro
        labels: Object.keys(DadosUsuario.participacao_mercado_anual['2023']), // Rótulos das fatias
        chart: {
          type: 'pie', // Tipo de gráfico de pizza
          height: 350,
        },
        dataLabels: {
          enabled: true, // Exibir rótulos de dados dentro das fatias
        },
        legend: {
          position: 'bottom', // Posição da legenda
        },
        tooltip: {
          enabled: true, // Exibir dicas de ferramentas
        },
      };

      if (window.innerWidth <= 600) { // checagem se a largura da tela for menor ou igual a 600 pixels (dispositivo móvel)
            
            PizzaParticipacaoMercado.dataLabels.enabled = false;
          }

      var chartPizza = new ApexCharts(document.querySelector("#GraficoDeParticipacao"), PizzaParticipacaoMercado);
      chartPizza.render(); // Renderiza o gráfico de pizza

              var somaValores = valoresItensRanking.slice(0, 9).reduce(function (a, b) {
        return a + b;
        }, 0);                //criando o rank

        var mensagemRankingDiv = document.getElementById('mensagem ranking');   

        var ranking = '';
        if (somaValores >= 90) {
          ranking = 'S (Superior)';
          mensagemRankingDiv.style.color = 'purple';
        } else if (somaValores >= 80) {
          ranking = 'A (Excelente)';
          mensagemRankingDiv.style.color = 'green';
        } else if (somaValores >= 70) {
          ranking = 'B (Bom)';
          mensagemRankingDiv.style.color = '#006400';
        } else if (somaValores >= 60) {
          ranking = 'C (Satisfatório)';
          mensagemRankingDiv.style.color = 'blue';
        } else if (somaValores >= 50) {
          ranking = 'D (Abaixo da Média)';
          mensagemRankingDiv.style.color = 'orange';
        } else {
          ranking = 'E (Insatisfatório)';
          mensagemRankingDiv.style.color = 'red';
        }

        mensagemRankingDiv.innerHTML = '<h2> Sua classificação é:</h2><br>' + ranking + '<br><br>';
        mensagemRankingDiv.style.fontWeight = 'bold';
        var mq = window.matchMedia('(max-width: 600px)'); 

        if (mq.matches) {
          mensagemRankingDiv.style.fontSize = '3vw'; // Define o tamanho da fonte em 3vw para dispositivos móveis
        } 
        else {
          mensagemRankingDiv.style.fontSize = '1.5vw'; // Define o tamanho da fonte em 1vw para outras telas
        }
      
      };

    </script>
   
    </div>